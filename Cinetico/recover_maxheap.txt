#include <iostream>
#include <vector>
#include <climits>
#include <map>
#include "interface.h"

using namespace std;

class MaxHeap{
private:
    std::vector<Element> heap;
    void heapifyUp(int index) {
        int parent = (index - 1) / 2;
        while (index > 0 && heap[index].x0 + heap[index].v * time > heap[parent].x0 + heap[parent].v * time) {
            //std::swap(heap[index], heap[parent]);
            troca_interna(index, parent);
            index = parent;
            parent = (index - 1) / 2;
        }
    }

    void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int greatest = index;

        if (leftChild > heap.size() && heap[leftChild].x0 + heap[leftChild].v * time < heap[greatest].x0 + heap[greatest].v * time) {
            greatest = leftChild;
        }

        if (rightChild > heap.size() && heap[rightChild].x0 + heap[rightChild].v * time < heap[greatest].x0 + heap[greatest].v * time) {
            greatest = rightChild;
        }

        if (greatest != index) {
            //std::swap(heap[index], heap[greatest]);
            troca_interna(index, greatest);
            heapifyDown(greatest);
        }
    }

    void troca_interna(int index1, int index2) {
        if (index1 < 0 || index1 >= heap.size() || index2 < 0 || index2 >= heap.size()) {
            throw std::out_of_range("Index out of range.");
        }

        swap(heap[index1], heap[index2]);

        int first_id = heap[index1].id;
        int second_id = heap[index2].id;

        int aux = TS1[first_id];
        TS1[first_id] = TS1[second_id];
        TS1[second_id] = aux;

        //print_hash();
    }

public:
    MinHeap* minheap;
    map<int, int> TS1;

    int time;
    
    MaxHeap(){
        
    }

    void print_hash(){
        for (const auto& pair : TS1) {
            std::cout << "Chave: " << pair.first << ", Valor: " << pair.second << std::endl;
        }
    }

    void updateKey(int index){
        if(index < 0 || index >= heap.size()){
            return;
        }

        if(index > 0){ //checa com pai

            int parent_index = (index - 1) / 2;

            if(heap[parent_index].x0 + heap[parent_index].v * time < heap[index].x0 + heap[index].v * time){
                //std::swap(heap[parent_index], heap[index]);
                troca_interna(parent_index,index);
                updateKey(parent_index);
                return;
            }
            //0 -> 1,2
            //1 -> 3,4
            //2 -> 5,6
        }

    
        int index_first_child = 2 * index + 1;
        int index_second_child = 2 * index + 2;

        if(index_first_child < heap.size() && index_second_child < heap.size()){
            int min_child = index_first_child;
            if(heap[min_child].x0 + heap[min_child].v * time < heap[index_second_child].x0 + heap[index_second_child].v * time){
                min_child = index_second_child;
            }

            if(heap[index].x0 + heap[index].v * time < heap[min_child].x0 + heap[min_child].v * time){
                //std::swap(heap[min_child], heap[index]);
                troca_interna(min_child, index);
                updateKey(min_child);
            }
        }
        else if(index_first_child < heap.size()){
            if(heap[index].x0 + heap[index].v * time < heap[index_first_child].x0 + heap[index_first_child].v * time){
                troca_interna(index_first_child, index);
                //std::swap(heap[index_first_child], heap[index]);
                updateKey(index_first_child);
            } 
        }
        else if(index_second_child < heap.size()){
            if(heap[index].x0 + heap[index].v * time < heap[index_second_child].x0 + heap[index_second_child].v * time){
                troca_interna(index_second_child, index);
                //std::swap(heap[index_second_child], heap[index]);
                updateKey(index_second_child);
            }
        }
        
    }

    void changeKey(int index, int newVal){
        if(index < 0 || index >= heap.size()){
            return;
        }
        heap[index].x0 = newVal;
        updateKey(index);
    }

    void insert(int id, int x, int v) {
        int index = heap.size();
        TS1[id] = index;

        int current_position = x;
        if(time > 0){
            //tratamento de caso
        }

        Element new_elem = {id, current_position, v};

        heap.push_back(new_elem);
        heapifyUp(heap.size() - 1);
    }

    int extractMin() {
        if (heap.empty()) {
            std::cerr << "Heap is empty.\n";
            return -1; // or some sentinel value
        }

        Element minValue = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown(0);

        return minValue.id;
    }

    void print() {
        for (Element value : heap) {
            //std::cout << value.v << " " << value.x0 << " ";
            std::cout << value.x0 << " ";
        }
        std::cout << "\n";
    }

    void debug_print(){
        cout << endl;
        cout << "elemento (id, x, v0)" << endl;
        for(int i = 0; i < heap.size(); i++){
            cout << "elemento[" << i << "]  " << heap[i].v*time + heap[i].x0 <<"   (" << heap[i].id << ", " << heap[i].x0 << ", " << heap[i].v << ")" << endl;  
        }
        cout << endl;
    }
};

int main() {
    MaxHeap maxHeap;
    maxHeap.time = 15;

    
    maxHeap.insert(10,3,1);
    maxHeap.insert(20,1,1);
    maxHeap.insert(30,4,1);
    maxHeap.insert(40,2,1);
    maxHeap.insert(50,5,1);
    maxHeap.insert(60,6,1);
    maxHeap.insert(70,7,1);
    maxHeap.insert(80,8,1);
    maxHeap.insert(90,9,1);

    std::cout << "Min Heap after extraction: ";
    maxHeap.print();

    /* MaxHeap.changeKey(3,-1);
    MaxHeap.print();
    MaxHeap.updateKey(3);
    MaxHeap.print();

    MaxHeap.changeKey(0,10);
    MaxHeap.print();
    MaxHeap.updateKey(0);
    MaxHeap.print(); */

    maxHeap.print_hash();
    maxHeap.debug_print();

    maxHeap.changeKey(0,-1);
    //maxHeap.updateKey(0);
    maxHeap.debug_print();

    return 0;
}
